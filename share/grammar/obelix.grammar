%
  prefix:      script_parse_
  lexer:       "whitespace: ignoreall=1;onnewline=script_parse_mark_line"
  lexer:       keyword
  lexer:       identifier
  lexer:       "number: signed=0"
  lexer:       "qstring: quotes=\'\"`/"
  lexer:       "comment: marker=/* */;marker=//;marker=^#"
%

program                     := [ init ] statements [ done ]
                             ;

statements                  := statement
                               statements
                             |
                             ;

statement                   := conditional
                             | while_loop
                             | for_loop
                             | break
                             | continue
                             | switch
                             | func_def
                             | return_stmt
                             | yield_stmt
                             | import_stmt
                             | new
                             | context_block
                             | throw
                             | leave
                             | pass              [ nop                       ]
                             | assignment_or_call
                             ;

pass                        := ';'
                             | "pass"
                             ;

conditional                 := "if"              [ if                        ]
                               expr              [ test                      ]
                               statements
                               elif_seq
                               else
                               "end"             [ end_conditional           ]
                             ;

elif_seq                    := elif
                               elif_seq
                             |
                             ;

elif                        := "elif"            [ elif                      ]
                               expr              [ test                      ]
                               statements
                             ;

else                        := "else"            [ else                      ]
                               statements
                             |
                             ;

while_loop                  := "while"           [ start_loop                ]
                               expr              [ test                      ]
                               statements
                               "end"             [ end_loop                  ]
                             ;

for_loop                    := "for"
                               identifier
                               "in"
                               expr              [ for                       ]
                               statements
                               "end"             [ end_loop                  ]
                             ;

break                       := "break"           [ break                     ]
                             ;

continue                    := "continue"        [ continue                  ]
                             ;

switch                      := "switch"          [ if                        ]
                               expr              [ stash: 0 new_counter      ]
                               cases             [ discard_counter           ]
                               "end"             [ end_conditional           ]
                             ;

cases                       := cases_seq
                               default
                             ;

cases_seq                   := case_block
                               cases_seq
                             |
                             ;

case_block                  :=                  [ case_prolog                ]
                               case_stmt
                               case_stmts       [ rollup_cases test          ]
                               statements
                              ;

case_stmts                  := case_stmt
                               case_stmts
                             |
                             ;

case_stmt                   := "case"           [ incr                       ]
                               expr             [ case                       ]
                               ':'
                             ;

default                     := "default"        [ else                       ]
                               ':'
                               statements
                             ;

func_def                    := func_type
                               'i'               [ push                      ]
                               (                 [ bookmark                  ]
                               parlist_or_void
                               )                 [ rollup_list               ]
                               func_block
                             ;

func_type                   := "func"            [ pushval: 0                ]
                             | "threadfunc"      [ pushval: 1                ]
                             | "generator"       [ pushval: 2                ]
                             ;

func_block                  :=                   [ start_function            ]
                               baseclasses
                               statements
                               "end"             [ end_function              ]
                             | link_clause       [ native_function           ]
                             ;

baseclasses                 := :                 [ baseclass_constructors    ]
                               _baseclasses      [ end_constructors          ]
                             |
                             ;

_baseclasses                := baseclass
                               baseclass_tail
                             ;

baseclass                   := identifier
                               (                 [ setup_constructor         ]
                               arglist_or_void
                               )                 [ func_call                 ]
                             ;

baseclass_tail              := ,
                               _baseclasses
                             |
                             ;

link_clause                 := "->" '"'
                             ;

dummy                       :=
                             ;

parlist_or_void             := parlist
                             |
                             ;

parlist                     := param
                               parlist_tail
                             ;

param                       := 'i'               [ push                      ]
                             ;

parlist_tail                := ,
                               parlist
                             |
                             ;

lambda                      := "lambda"
                               (                 [ bookmark                  ]
                               parlist_or_void
                               )                 [ rollup_list
                                                   start_lambda              ]
                               statements
                               "end"             [ end_lambda                ]
                             ;

return_stmt                 := "return"
                               expr              [ instruction: "Return"     ]
                             ;

yield_stmt                  := "yield"
                               expr              [ instruction: "Yield"      ]
                             ;

new                         := "new"            [ setup_function: "new" incr ]
                               identifier        [ pushval_from_stack        ]
                               _func_call
                             ;

import_stmt                 := "import"      [ setup_function: "import" incr ]
                               identifier [ pushval_from_stack func_call pop ]
                             ;

context_block               := "context"
                               identifier
                               assignment_or_empty [ begin_context_block     ]
                               statements
                               "end"               [ end_context_block       ]
                             ;

assignment_or_empty         :=                   [ dup                       ]
                                assignment
                             |
                             ;

throw                       := "throw"
                               expr              [ throw_exception           ]
                             ;

leave                       := "leave"           [ leave                     ]
                             ;

assignment_or_call          := identifier
                               _assignment_or_call
                             ;

_assignment_or_call         := assignment
                             |                   [ instruction: "PushScope"
                                                   deref                     ]
                               func_calls        [ pop                       ]
                             ;

func_calls                  := func_call
                               _func_calls
                             ;

_func_calls                 := .
                               var_or_calls
                             |
                             ;

assignment                  := =
                               expr              [ assign                    ]
                             ;

expr                        := predicate
                               predicatetail
                             ;

reduction                   := '|'               [ deref_function: "reduce"  ]
                               expr
                               reduction_init    [ reduce                    ]
                             ;

reduction_init              := "<-"
                               expr              [ pushval: 1                ]
                             |                   [ pushval: 0                ]
                             ;

predicatetail               := logic_op          [ infix_op                  ]
                               predicate         [ call_op                   ]
                             | ternary
                             |
                             ;

ternary                     := ?                 [ if test                   ]
                               expr
                               :                 [ else                      ]
                               expr              [ end_conditional           ]
                             ;

predicate                   := term
                               termtail
                             ;

termtail                    := add_op            [ infix_op                  ]
                               term              [ call_op                   ]
                               termtail
                             | reduction
                             |
                             ;

term                        := factor
                               factortail        [ qstring_enable_slash      ]
                             ;

factortail                  := mult_op           [ infix_op                  ]
                               factor            [ call_op                   ]
                               factortail
                             |
                             ;

factor                      := expr_atom
                               subscript
                             ;

subscript                   := '[' expr ']'      [ instruction: "Subscript"  ]
                             |
                             ;

expr_atom  [ qstring_disable_slash ] := ( expr )
                             |                   [ instruction: "PushScope"  ]
                               var_or_calls
                             | new
                             | constant
                             | query
                             | lambda
                             ;

var_or_calls                := var_or_call
                               _var_or_calls
                             ;

_var_or_calls               := .
                               var_or_calls
                             |
                             ;

var_or_call                 := identifier        [ deref                     ]
                               call_or_empty
                             ;

call_or_empty               := func_call
                             |
                             ;

identifier                  :=                   [ bookmark                  ]
                               _identifier       [ rollup_name               ]
                             ;

_identifier                 := 'i'               [ push                      ]
                               _identifier_tail
                             ;

_identifier_tail            := '.'
                               _identifier
                             |
                             ;

query                       :=                   [ init_query               ]
                               '`'
                               query_params      [ query                     ]
                            ;

query_params                := '%' ( arglist )
                             |
                             ;

constant                    := '"'               [ push_token                ]
                             | '\''              [ push_token                ]
                             | '/'               [ push_token                ]
                             | signed_number
                             | list
                             | object
                             | "true"            [ pushconst: "bool:1"       ]
                             | "false"           [ pushconst: "bool:0"       ]
                             | "null"            [ pushconst: "ptr:null"     ]
                             ;

signed_number               := sign
                               number            [ push_signed_val           ]
                            ;

sign                        := +                 [ push_tokenstring          ]
                             | -                 [ push_tokenstring          ]
                             |                   [ pushval: '+'              ]
                             ;

number                      := 'd'
                             | 'f'
                             | 'x'
                             ;

list                        := '['               [ setup_function: "list"    ]
                               entrylist_or_empty
                               ']'               [ func_call                 ]
                             ;

entrylist_or_empty          :=                   [ instruction_bookmark      ]
                               entry
                               comprehension_or_tail
                             |
                             ;

entry                       := expr              [ incr                      ]
                             ;

comprehension_or_tail       := comprehension
                             |                [ discard_instruction_bookmark ]
                               entrylist_tail
                             ;

entrylist                   := entry
                               entrylist_tail
                             ;

entrylist_tail              := ,
                               entrylist
                             |
                             ;

comprehension               := "for"
                               identifier
                               "in"              [ defer_bookmarked_block
                                                   pushconst: "int:0"        ]
                               expr              [ for                       ]
                               where_or_empty    [ comprehension
                                                   end_loop
                                                   set_variable: "varargs=bool:1" ]
                              ;

where_or_empty              := where
                             |
                             ;

where                       := "where"
                               expr              [ where                     ]
                             ;

object                      := '{'               [ setup_function: "object"  ]
                               attrlist_or_empty
                               '}'               [ func_call                 ]
                             ;

attrlist_or_empty           := attrlist
                             |
                             ;

attrlist                    := attrname          [ push                      ]
                               ':'
                               expr
                               attrlist_tail
                             ;

attrname                    := 'i' | '"' | '\'' ;

attrlist_tail               := ,
                               attrlist
                             |
                             ;

logic_op                    := > | ">=" | < | "<=" | "==" | "!=" | "||" | "&&" | "and" | "or"
                             ;

add_op                      := + | - | ~
                             ;

mult_op                     := * | / | ^ | %
                             ;

func_call                   :=                   [ init_function             ]
                              _func_call
                             ;

_func_call                  := (
                               arglist_or_void
                               )                 [ func_call                 ]
                             ;

arglist_or_void             := arglist
                             |
                             ;

arglist                     := argument
                               arglist_tail
                             ;

argument                    := expr              [ incr                      ]
                             ;

arglist_tail                := ,
                               arglist
                             |
                             ;
