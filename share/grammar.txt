%
prefix: script_parse_
init: "init"
done: "done"
ignore: whitespace
hashpling: true
%

program                     := statements 
                             ;

statements                  := statement
                               statements 
                             | 
                             ;

statement                   := conditional
                             | while_loop
                             | for_loop
                             | func_def
                             | return_stmt
                             | import_stmt
                             | new
                             | identifier
                               assignment_or_call
                             ;

conditional                 := "if"
                               expr
                               "then"            [ emit_test                 ]
                               statements
                               else_clause
                               end_stmt          [ emit_end                  ]
                             ;

else_clause                 := "else"            [ emit_else                 ]
                               statements
                             |
                             ;
                             
end_stmt                    := "end"
                             ;

while_loop                  := "while"           [ push_label                ]
                               expr              [ emit_test                 ]
                               statements
                               end_stmt          [ emit_end_while            ]
                             ;

for_loop                    := "for"
                               'i'
                               "in"
                               expr
                               statements
                               end_stmt
                             ;
                             
func_def                    := "func"
                               'i'               [ push: $                   ]
                               (                 [ bookmark                  ]
                               parlist_or_void
                               )                 [ rollup_to_list            ]
                               func_block
                             ;
                             
func_block                  := "begin"           [ start_function            ]
                               statements
                               end_stmt          [ end_function              ]
                             | link_clause       [ native_function           ]
                             ;
                             
link_clause                 := "->" '"'
                             ;
                             
dummy                       :=
                             ;

parlist_or_void             := parlist
                             |
                             ;
                             
parlist                     := param
                               parlist_tail
                             ;

param                       := 'i'               [ push: $                   ] 
                             ;

parlist_tail                := ,
                               parlist
                             |
                             ;

return_stmt                 := "return"          [ push: "END"               ]
                               expr              [ jump                      ]
                             ;

import_stmt                 := "import"
                               identifier        [ import                    ]
                             ;

new                         := "new"
                               identifier        [ push: 1                   ]
                               func_call
                             ;

assignment_or_call          := assignment
                             |                   [ push: 0                   ]
                               func_call         [ emit_pop                  ]
                             ;

assignment                  := =
                               expr              [ emit_assign               ]
                             ;

expr                        := predicate
                               predicatetail
                             ;
                         
predicatetail               := logic_op          [ push: $                   ]
                               predicate         [ emit_infix_op             ]
                             |
                             ;
                               
predicate                   := term
                               termtail
                             ;

termtail                    := add_op            [ push: $                   ]
                               term              [ emit_infix_op             ]
                               termtail
                             | 
                             ;

term                        := factor 
                               factortail 
                             ;

factortail                  := mult_op           [ push: $                   ]
                               factor            [ emit_infix_op             ] 
                               factortail
                             | 
                             ;

factor                      := ( expr )
                             | var_or_call 
                             | constant  
                             ;

var_or_call                 := new
                             |                   [ push: 0                   ] 
                               identifier
                               call_or_empty
                             ;
                              
call_or_empty               :=                   [ push: 0                   ] 
                               func_call
                             |                   [ emit_pushvar              ]
                             ;
                             
identifier                  :=                   [ bookmark                  ]
                               _identifier       [ rollup_to_name            ]

_identifier                 := 'i'               [ push: $                   ]
			       _identifier_tail
			     ;

_identifier_tail            := .
                               _identifier
                             |
                             ;
                             
constant                    := '"'               [ emit_pushval              ]  
                             | '\''              [ emit_pushval              ]  
                             | signed_number
			     | list
                             | object
			     | "true"
                	     | "false"
                             ;

signed_number               := sign
                               number            [ push_signed_val           ]
                            ;

sign                        := +                 [ push: $                   ]
                             | -                 [ push: $                   ]
                             |                   [ push: '+'                 ]
                             ;

number                      := 'd'
                             | 'f'
                             | 'x'
                             ;
                               
list                        :=                   [ push: "list"              ]
                               '['               [ setup_function            ]
                               entrylist_or_empty
                               ']'               [ emit_func_call            ]
                             ;

entrylist_or_empty          := entrylist
                             |
                             ;

entrylist                   := expr              [ incr_counter              ]
                               entrylist_tail
                             ;

entrylist_tail              := ,
			       entrylist
                             |
			     ;

object                      :=                   [ push: "object"            ]
                               '{'               [ setup_function            ]
                               attrlist_or_empty
                               '}'               [ emit_func_call            ]
                             ;

attrlist_or_empty           := attrlist
                             |
                             ;

attrlist                    := 'i'               [ push: $                   ]
                               ':' 
                               expr
                               attrlist_tail
                             ;

attrlist_tail               := ,
			       attrlist
                             |
			     ;

logic_op                    := > | ">=" | < | "<=" | "==" | "!=" ;
                             
add_op                      := + | - ;

mult_op                     := * | / | ^ | % ;

func_call                   := (                 [ new_counter               ]
                               arglist_or_void
                               )                 [ emit_func_call            ]
                             ;

arglist_or_void             := arglist
                             |
                             ;

arglist                     := argument
                               arglist_tail
                             ;

argument                    := expr              [ incr_counter              ] 
                             ;

arglist_tail                := ,
                               arglist
                             |
                             ;
