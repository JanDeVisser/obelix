const char * MNEMONIC[256] = {
  "nop",
  "mov a,#%02x",
  "mov a,(%04x)",
  "mov a,b",
  "mov a,c",
  "mov a,d",
  "mov b, #%02x",
  "mov b,(%04x)",
  "mov b,a",
  "mov b,c",
  "mov b,d",
  "mov c,#%02x",
  "mov c,(%04x)",
  "mov c,a",
  "mov c,b",
  "mov c,d",
  "mov d,#%02x",
  "mov d,(%04x)",
  "mov d,a",
  "mov d,b",
  "mov d,c",
  "mov sp,#%04x",
  "mov sp,(%04x)",
  "mov sp,si",
  "mov si,#%04x",
  "mov si,(%04x)",
  "mov si,cd",
  "mov di,#%04x",
  "mov di,(%04x)",
  "mov di,cd",
  "mov a,(si)",
  "mov b,(si)",
  "mov c,(si)",
  "mov d,(si)",
  "mov a,(di)",
  "mov b,(di)",
  "mov c,(di)",
  "mov d,(di)",
  "mov (di),(si)",
  "jmp #%04x",
  "jnz #%04x",
  "jc #%04x",
  "jv #%04x",
  "call #%04x",
  "ret",
  "push a",
  "push b",
  "push c",
  "push d",
  "push si",
  "push di",
  "pop a",
  "pop b",
  "pop c",
  "pop d",
  "pop si",
  "pop di",
  "mov (%04x),a",
  "mov (di),a",
  "mov (%04x),b",
  "mov (di),b",
  "mov (%04x),c",
  "mov (di),c",
  "mov (%04x),d",
  "mov (di),d",
  "mov (%04x),si",
  "mov (%04x),di",
  "mov (%04x),cd",
  "mov (si),cd",
  "mov (di),cd",
  "add a,b",
  "adc a,b",
  "sub a,b",
  "sbb a,b",
  "and a,b",
  "or a,b",
  "xor a,b",
  "not a",
  "shl a",
  "shr a",
  "add a,c",
  "adc a,c",
  "sub a,c",
  "sbb a,c",
  "and a,c",
  "or a,c",
  "xor a,c",
  "add a,d",
  "adc a,d",
  "sub a,d",
  "sbb a,d",
  "and a,d",
  "or a,d",
  "xor a,d",
  "add b,c",
  "adc b,c",
  "sub b,c",
  "sbb b,c",
  "and b,c",
  "or b,c",
  "xor b,c",
  "not b",
  "shl b",
  "shr b",
  "add b,d",
  "adc b,d",
  "sub b,d",
  "sbb b,d",
  "and b,d",
  "or b,d",
  "xor b,d",
  "add c,d",
  "adc c,d",
  "sub c,d",
  "sbb c,d",
  "and c,d",
  "or c,d",
  "xor c,d",
  "not c",
  "shl c",
  "shr c",
  "not d",
  "shl d",
  "shr d",
  "clr a",
  "clr b",
  "clr c",
  "clr d",
  "swp a,b",
  "swp a,c",
  "swp a,d",
  "swp b,c",
  "swp b,d",
  "swp c,d",
  "add ab,cd",
  "adc ab,cd",
  "sub ab,cd",
  "sbb ab,cd",
  "jmp (%04x)",
  "jnz (%04x)",
  "jc (%04x)",
  "jv (%04x)",
  "call (%04x)",
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  nullptr,
  "hlt",
}
