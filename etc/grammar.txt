%
name: simple_expr
prefix: script_parse_
init: init
ignore_ws: true
hashpling: true
%

program                     := statements 
                             ;

statements                  := statement
                               statements 
                             | 
                             ;

statement                   := conditional
                             | while_loop
                             | for_loop
                             | func_def
                             | return_stmt
                             | import_stmt
                             | identifier        [ init: init_count          ]
                               assignment_or_call
                             ;

conditional                 := "if"
                               expr
                               "then"         [ emit_test       ]
                               statements
                               else_clause
                               end_stmt       [ emit_end        ]
                             ;

else_clause                 := "else"         [ emit_else       ]
                               statements
                             |
                             ;
                             
end_stmt                    := "end"
                             ;

while_loop                  := "while"        [ push_label      ]
                               expr           [ emit_test       ]
                               statements
                               end_stmt       [ emit_end_while  ]
                             ;

for_loop                    := "for"
                               'i'
                               "in"
                               expr
                               statements
                               end_stmt
                             ;
                             
func_def                    := native_opt
                               "func"
                               'i'               [ push_last_token           ]
                               (                 [ push: 0                   ]
                               parlist_or_void
                               )                 [ start_function            ]
                               statements
                               end_stmt          [ end_function              ]
                             ;
                             
native_opt                  := "native"          [ push: 1                   ]
                             | dummy             [ push: 0                   ]
                             ;

parlist_or_void             := parlist
                             |
                             ;
                             
parlist                     := param
                               parlist_tail
                             ;

param                       := 'i'               [ push_param                ] 
                             ;

parlist_tail                := ,
                               parlist
                             |
                             ;

return_stmt                 := "return"
                               expr 
                             ;

import_stmt                 := "import"          [ push: 0                   ]
                               identifier        [ import                    ]
                             ;

assignment_or_call          := assignment
                             | func_call         [ emit_pop                  ]
                             ;

assignment                  := =
                               expr              [ emit_assign               ]
                             ;

expr                        := predicate
                               predicatetail
                             ;
                         
predicatetail               := logic_op        [ push: $         ]
                               predicate       [ emit_mathop     ]
                             |
                             ;
                               
predicate                   := term
                               termtail
                             ;

termtail                    := add_op          [ push: $         ]
                               term            [ emit_mathop     ]
                               termtail
                             | 
                             ;

term                        := factor factortail 
                             ;

factortail                  := mult_op         [ push: $         ]
                               factor          [ emit_mathop     ]
                               factortail
                             | 
                             ;

factor                      := ( expr )
                             | var_or_call 
                             | constant          [ push: $                   ]  
                             ;

var_or_call:                 := identifier       [ init: init_count          ]
                                call_or_empty
                              ;
                              
call_or_empty:              := func_call
                             | dummy             [ emit_pushvar              ]
                             ;
                             
dummy                       := ;

identifier                  := 'i'               [ push_identifier_comp      ]
			       identifier_tail
			     ;

identifier_tail             := .
                               identifier
                             |
                             ;
                             
constant                    := '"'
                             | '\''
                             | 'd'
                             | 'f'
                             | 'x'
			     | list
                             ;

list                        := {                    [ push: 0                ]
                               entrylist_or_empty
                               }                    [ emit_new_list ]
                             ;

entrylist_or_empty          := entrylist
                             |
                             ;

entrylist                   := constant             [ param_count ]
                               entrylist_tail
                             ;

entrylist_tail              := ,
			       entrylist
                             |
			     ;

logic_op                    := > | ">=" | < | "<=" | "==" | "!=" ;
                             
add_op                      := + | - ;

mult_op                     := * | / | ^ | % ;

func_call                   := (                 [ init_count                ]
                               arglist_or_void
                               )                 [ emit_func_call            ]
                             ;

arglist_or_void             := arglist
                             |
                             ;

arglist                     := argument
                               arglist_tail
                             |
                             ;

argument                    := expr        [ param_count     ] 
                             ;

arglist_tail                := ,
                               arglist
                             |
                             ;
 
