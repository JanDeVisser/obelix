%
  prefix:      script_parse_
  ignore:      allwhitespace
  hashpling:   true
  _on_newline: mark_line
%

program                     := [ init ] statements [ done ]
                             ;

statements                  := statement
                               statements 
                             | 
                             ;

statement                   := conditional
                             | while_loop
                             | for_loop
                             | switch
                             | func_def
                             | return_stmt
                             | import_stmt
                             | new
                             | context_block
                             | throw
                             | leave
                             | pass              [ nop                       ]
                             | identifier
                               assignment_or_call
                             ;

pass                        := ';'
                             | "pass"
                             ;

conditional                 := "if"              [ if                        ]
                               expr              [ test                      ]
                               statements
                               elif_seq
                               else
                               end               [ end_conditional           ]
                             ;

elif_seq                    := elif
                               elif_seq
                             |
                             ;

elif                        := "elif"            [ elif                      ]
                               expr              [ test                      ]
                               statements
                             ;

else                        := "else"            [ else                      ]
                               statements
                             |
                             ;

end                         := "end"
                             ;

while_loop                  := "while"           [ start_loop                ]
                               expr              [ test                      ]
                               statements
                               end               [ end_loop                  ]
                             ;

for_loop                    := "for"
                               identifier
                               "in"
                               expr              [ for                       ]
                               statements
                               end               [ end_loop                  ]
                             ;
switch                      := "switch"          [ if                        ]
                               expr              [ stash: 0 new_counter      ]
                               cases             [ discard_counter           ]
                               end               [ end_conditional           ]
                             ;

cases                       := cases_seq
                               default
                             ;

cases_seq                   := case_block
                               cases_seq
                             |
                             ;

case_block                  :=                  [ case_prolog                ]
                               case_stmt
                               case_stmts       [ rollup_cases test          ]
                               statements
                              ;

case_stmts                  := case_stmt
                               case_stmts
                             |
                             ;

case_stmt                   := "case"           [ incr                       ]
                               expr             [ case                       ]
                               ':'
                             ;

default                     := "default"        [ else                       ]
                               ':'
                               statements
                             ;

func_def                    := sync_async
                               "func"
                               'i'               [ push                      ]
                               (                 [ bookmark                  ]
                               parlist_or_void
                               )                 [ rollup_list               ]
                               func_block
                             ;

sync_async                  := "async"           [ pushval: 1                ]
                             |                   [ pushval: 0                ]
                             ;

func_block                  :=                   [ start_function            ]
                               baseclasses
                               statements
                               end               [ end_function              ]
                             | link_clause       [ native_function           ]
                             ;

baseclasses                 := :                 [ baseclass_constructors    ]
                               _baseclasses      [ end_constructors          ]
                             |
                             ;

_baseclasses                := baseclass
                               baseclass_tail
                             ;

baseclass                   := identifier
                               (                 [ setup_constructor         ]
                               arglist_or_void
                               )                 [ func_call                 ]
                             ;

baseclass_tail              := ,
                               _baseclasses
                             |
                             ;

link_clause                 := "->" '"'
                             ;

dummy                       :=
                             ;

parlist_or_void             := parlist
                             |
                             ;

parlist                     := param
                               parlist_tail
                             ;

param                       := 'i'               [ push                      ] 
                             ;

parlist_tail                := ,
                               parlist
                             |
                             ;

return_stmt                 := "return"
                               expr              [ jump: "END"               ]
                             ;

new                         := "new"             [ setup_function: "new" incr ]
                               identifier        [ pushval_from_stack         ]
                               _func_call
                             ;

import_stmt                 := "import"
                               identifier        [ import                    ]
                             ;

context_block               := "context"
                               identifier
                               assignment_or_empty [ begin_context_block     ]
                               statements
                               end                 [ end_context_block       ]
                             ;

assignment_or_empty         :=                   [ dup                       ]
                                assignment
                             |
                             ;

throw                       := "throw"
                               expr              [ throw_exception           ]
                             ;

leave                       := "leave"           [ leave                     ]
                             ;

assignment_or_call          := assignment
                             | func_call         [ pop                       ]
                             ;

assignment                  := =
                               expr              [ assign                    ]
                             ;

expr                        := predicate
                               predicatetail
                             ;

reduction                   := "@" expr 
                               "<-"
                               expr
                               reduction2
                             ;

reduction2                  := "<-" 
                               expr              [ reduce: 1                 ]
                             |                   [ reduce: 0                 ]
                             ;

predicatetail               := logic_op          [ push_tokenstring          ]
                               predicate         [ infix_op                  ]
                             |
                             ;

predicate                   := term
                               termtail
                             | reduction
                             ;

termtail                    := add_op            [ push_tokenstring          ]
                               term              [ infix_op                  ]
                               termtail
                             | 
                             ;

term                        := factor 
                               factortail 
                             ;

factortail                  := mult_op           [ push_tokenstring          ]
                               factor            [ infix_op                  ] 
                               factortail
                             | 
                             ;

factor                      := expr_atom
                               subscript
                             ;

subscript                   := '[' expr ']'      [ subscript                 ]
                             |
                             ;

expr_atom                   := ( expr )
                             | var_or_call 
                             | constant
                             | query
                             ;

var_or_call                 := new
                             | identifier
                               call_or_empty
                             ;

call_or_empty               := func_call
                             |                   [ pushvar                   ]
                             ;

identifier                  :=                   [ bookmark                  ]
                               _identifier       [ rollup_name               ]
                             ;

_identifier                 := 'i'               [ push                      ]
                               _identifier_tail
                             ;

_identifier_tail            := .
                               _identifier
                             |
                             ;

query                       := '`'               [ query                     ]
                            ;

constant                    := '"'               [ push_token                ]
                             | '\''              [ push_token                ]
                             | signed_number
                             | list
                             | object
                             | regexp
                             | "true"            [ pushconst: "bool:1"       ]
                             | "false"           [ pushconst: "bool:0"       ]
                             ;

signed_number               := sign
                               number            [ push_signed_val           ]
                            ;

sign                        := +                 [ push_tokenstring          ]
                             | -                 [ push_tokenstring          ]
                             |                   [ pushval: '+'              ]
                             ;

number                      := 'd'
                             | 'f'
                             | 'x'
                             ;

list                        := '['               [ setup_function: "list"    ]
                               entrylist_or_empty
                               ']'               [ func_call                 ]
                             ;

entrylist_or_empty          :=                   [ instruction_bookmark      ]
                               entry
                               comprehension_or_tail
                             |
                             ;

entry                       := expr              [ incr                      ]
                             ;

comprehension_or_tail       := comprehension
                             |                [ discard_instruction_bookmark ]
                               entrylist_tail
                             ;

entrylist                   := entry
                               entrylist_tail
                             ;

entrylist_tail              := ,
                               entrylist
                             |
                             ;

comprehension               := "for"
                               identifier
                               "in"              [ defer_bookmarked_block
                                                   pushconst: "int:0"        ]
                               expr              [ for
                                                   comprehension
                                                   end_loop
                                                   set_variable: "varargs"   ]
                             ;

object                      := '{'               [ setup_function: "object"  ]
                               attrlist_or_empty
                               '}'               [ func_call                 ]
                             ;

attrlist_or_empty           := attrlist
                             |
                             ;

attrlist                    := attrname          [ push                      ]
                               ':' 
                               expr
                               attrlist_tail
                             ;

attrname                    := 'i' | '"' | '\'' ;

attrlist_tail               := ,
                               attrlist
                             |
                             ;

regexp                      := '/'               [ setup_function: "regexp"
                                                   rollup_to: "/"
                                                   pushval_from_stack
                                                   incr
                                                   func_call                 ]
                             ;

logic_op                    := > | ">=" | < | "<=" | "==" | "!=" | "||" | "&&" | "and" | "or"
                             ;

add_op                      := + | - | ~ 
                             ;

mult_op                     := * | / | ^ | %
                             ;

func_call                   :=                   [ init_function             ]
                               _func_call
                             ;

_func_call                  := (
                               arglist_or_void
                               )                 [ func_call                 ]
                             ;

arglist_or_void             := arglist
                             |
                             ;

arglist                     := argument
                               arglist_tail
                             ;

argument                    := expr              [ incr                      ] 
                             ;

arglist_tail                := ,
                               arglist
                             |
                             ;
